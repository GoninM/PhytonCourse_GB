# 3. Создайте собственный класс-исключение, который должен проверять содержимое списка на наличие только чисел.
# Проверить работу исключения на реальном примере.
# Запрашивать у пользователя данные и заполнять список необходимо только числами.
# Класс-исключение должен контролировать типы данных элементов списка.
#
# Примечание: длина списка не фиксирована.
# Элементы запрашиваются бесконечно, пока пользователь сам не остановит работу скрипта, введя, например, команду «stop».
# При этом скрипт завершается, сформированный список с числами выводится на экран.
#
# Подсказка: для этого задания примем, что пользователь может вводить только числа и строки.
# Во время ввода пользователем очередного элемента необходимо реализовать проверку типа элемента.
# Вносить его в список, только если введено число. Класс-исключение должен не позволить пользователю ввести текст
# (не число) и отобразить соответствующее сообщение. При этом работа скрипта не должна завершаться.

class OwnIntException(Exception):
    def __init__(self, txt):
        self.txt = txt


result = []
while True:
    n = input('Введите число либо "stop" для остановки ввода: ')

    if n == 'stop':
        break

    try:
        if n.count('.') == 1:
            if not n.replace('.', '').isdigit():
                raise OwnIntException('Введено не число')
        elif not n.isdigit():
            raise OwnIntException('Введено не число')

    except OwnIntException as err:
        print(err)
    else:
        result.append(float(n))

print(result)
